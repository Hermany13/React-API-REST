{"version":3,"sources":["pages/perfil.jpg","pages/jsonEx.JPG","pages/fet.JPG","App.js","serviceWorker.js","components/conv.js","pages/home.js","pages/contato.js","pages/descr.js","index.js"],"names":["module","exports","App","menuitems","label","icon","command","props","history","push","className","model","style","backgroundColor","borderColor","id","this","children","Component","withRouter","Boolean","window","location","hostname","match","Conv","state","items","isLoaded","fetch","then","res","json","setState","lista","map","item","lio","key","no","name","ne","ni","username","email","address","city","ca","marginBottom","borderRadius","marginRight","padding","listStyleType","fontWeight","marginTop","Home","spa","lin","cursor","logo","border","width","Contato","src","profile","href","sp","fontStyle","imgC","Descr","jsonex","fet","ReactDOM","render","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.49c4ea46.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/perfil.b32daa23.jpg\";","module.exports = __webpack_public_path__ + \"static/media/jsonEx.0b9fca95.JPG\";","module.exports = __webpack_public_path__ + \"static/media/fet.c628c2ff.JPG\";","import React, { Component } from 'react';\nimport 'primereact/resources/themes/nova-light/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\nimport './App.css';\n\nimport {Menubar} from 'primereact/menubar';\nimport {withRouter} from 'react-router-dom';\n\nclass App extends Component {\n\n  \n  render() {\n    const menuitems = [\n      {\n         label:'API em Uso',\n         icon:'pi pi-fw pi-id-card',\n         command:() => this.props.history.push('/')\n      },\n      {\n        label:'Descrição',\n        icon:'pi pi-fw pi-info-circle',\n        command:() => this.props.history.push('/descr')\n     },\n      {\n         label:'Contato',\n         icon:'pi pi-fw pi-user',\n         command:() => this.props.history.push('/contato')\n      },\n   ];\n\n   const menu = {\n     backgroundColor: \"#66B3FF\",\n     borderColor: \"#CCE6FF\",\n   }\n\n    return (\n      <div className=\"App\">\n        <Menubar model={menuitems} style={menu}/>      \n        <div id=\"main\">\n            <main>\n                <div className=\"content\" id=\"content\">\n                    {this.props.children}\n                </div>\n            </main>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {Component} from 'react';\r\n\r\nclass Conv extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            items: [],\r\n            isLoaded: false\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        fetch('https://jsonplaceholder.typicode.com/users/')\r\n            .then(res => res.json())\r\n            .then(json => {\r\n                this.setState({isLoaded: true, items: json})\r\n            });\r\n    }\r\n\r\n    render() {\r\n\r\n        var {isLoaded, items} = this.state;\r\n        if (!isLoaded) {\r\n            return <div style={ca}>Carregando...</div>;\r\n        } else {\r\n            return (\r\n                <div className=\"App\">\r\n                    <ul style={lista}>\r\n                        {items.map(item => (\r\n                            <div style={lio}>\r\n                                <li key={item.id}>\r\n                                    <span style={no}>Nome:\r\n                                    </span>\r\n                                    {item.name}\r\n                                    <div style={ne}>\r\n                                        <span style={ni}>Username:\r\n                                        </span>\r\n                                        {item.username}</div>\r\n                                    <div style={ne}>\r\n                                        <span style={ni}>Email:\r\n                                        </span>\r\n                                        {item.email}</div>\r\n                                    <div style={ne}>\r\n                                        <span style={ni}>Cidade:\r\n                                        </span>\r\n                                        {item.address.city}</div>\r\n\r\n                                </li>\r\n                            </div>\r\n\r\n                        ))}\r\n                    </ul>\r\n\r\n                </div>\r\n            );\r\n        }\r\n\r\n    }\r\n}\r\n\r\nconst lio = {\r\n    backgroundColor: \"#CCE6FF\",\r\n    marginBottom: \"30px\",\r\n    borderRadius: \"5px\",\r\n    marginRight: \"30px\",\r\n    padding: 15\r\n}\r\n\r\nconst lista = {\r\n    listStyleType: \"none\"\r\n}\r\n\r\nconst no = {\r\n    fontWeight: \"bold\",\r\n    marginTop: \"-30\"\r\n}\r\n\r\nconst ni = {\r\n    fontWeight: \"bold\",\r\n    marginTop: \"5px\"\r\n}\r\n\r\nconst ne = {\r\n    marginTop: \"5px\"\r\n}\r\n\r\nconst ca = {\r\n    marginTop: \"10px\"\r\n}\r\n\r\nexport default Conv;\r\n","import React from 'react';\r\nimport Conv from '../components/conv';\r\n\r\n\r\nconst Home = () => (\r\n    <div className=\"title\">\r\n        <Conv></Conv>\r\n    </div>\r\n);\r\n\r\nexport default Home;","import React from 'react';\r\nimport profile from \"./perfil.jpg\";\r\n\r\n\r\n\r\nconst Contato = () => (\r\n    <div className=\"title\">\r\n        <img src={profile} style={logo}/>\r\n        <h2>Hermany Vieira Oliveira</h2>        \r\n        <p><span style={spa}>E-mail:</span> hermanyvieiratj@gmail.com</p>\r\n        <p><span style={spa}>GitHub:</span><a href=\"https://github.com/Hermany13\" style={lin}> https://github.com/Hermany13</a></p>\r\n    </div>\r\n);\r\n\r\n\r\nconst spa = {\r\n    fontWeight: \"bold\",\r\n}\r\n\r\nconst lin = {\r\n    cursor: \"pointer\"\r\n}\r\n\r\nconst logo = {\r\n    border: '3px solid #66B3FF',\r\n    width: \"170px\",\r\n    borderRadius: \"100px\",\r\n    marginTop: \"15px\",\r\n}\r\n\r\nexport default Contato;","import React from 'react';\r\nimport jsonex from './jsonEx.JPG';\r\nimport fet from './fet.JPG';\r\n\r\nconst Descr = () => (\r\n    <div className=\"title\">\r\n        <h2>React-API-Rest</h2>\r\n        <p>Esta aplicação foi feita com <a href={\"https://pt-br.reactjs.org\"}>ReactJS</a> e faz consumo de uma API<br/>\r\n            patrocinada pelo GitHub chamada <a href={\"https://jsonplaceholder.typicode.com\"}>JSONPlaceholder</a>, que consiste em uma API que<br/>\r\n            retorna um JSON com uma série de informações <span style={sp}>fakes</span> para testes e uso acadêmico.</p>\r\n            <h4>Exemplo de jsonplaceholder:</h4>\r\n            <img src={jsonex} style={imgC}></img>\r\n            <h4>Consulta</h4>\r\n            <p>O programa usa a função componentDidMount() da API <a href={\"https://pt-br.reactjs.org/docs/react-component.html\"}>React.Component</a> para que assim<br/>\r\n            que a página é montada ele mude os estados de <span style={sp}>\"items\"</span> e <span style={sp}>\"isLoaded\"</span> trazendo o Json recebido<br/>\r\n            para <span style={sp}>\"items\"</span> para que o possamos usar na aplicacação e mudando <span style={sp}>\"isLoaded\"</span> para <span style={sp}>\"false\"</span>.<br/>\r\n            Verificando que o json foi carregado através do <span style={sp}>\"isLoaded\"</span>, a aplicação gera uma lista com o conteúdo do json<br/>\r\n            através do método <a href={\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Array/map\"}>map()</a>.</p>\r\n            <h4>Código de consulta:</h4>\r\n            <img src={fet} style={imgC}></img>\r\n    </div>\r\n);\r\n\r\nconst sp = {\r\n    fontStyle: \"italic\",\r\n}\r\n\r\nconst imgC = {\r\n    width: 350,\r\n}\r\n\r\nexport default Descr;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Home from './pages/home';\nimport Contato from './pages/contato';\nimport Descr from './pages/descr';\n\nReactDOM.render(\n    (\n        <Router>\n            <App>\n                <Switch>\n                    <Route exact path=\"/\" component={Home}/>\n                    <Route path=\"/Contato\" component={Contato}/>\n                    <Route path=\"/Descr\" component={Descr}/>\n                </Switch>\n            </App>\n        </Router>\n    ),\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}