{"version":3,"sources":["App.js","serviceWorker.js","components/conv.js","pages/home.js","pages/contato.js","pages/descr.js","index.js"],"names":["App","menuitems","label","icon","command","props","history","push","className","model","id","this","children","Component","withRouter","Boolean","window","location","hostname","match","Conv","state","items","isLoaded","fetch","then","res","json","setState","style","lista","map","item","key","name","address","city","listStyleType","Home","Contato","Descr","ReactDOM","render","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kTASMA,E,iLAGM,IAAD,OACDC,EAAY,CAChB,CACGC,MAAM,YACNC,KAAK,qBACLC,QAAQ,kBAAM,EAAKC,MAAMC,QAAQC,KAAK,OAEzC,CACGL,MAAM,UACNC,KAAK,mBACLC,QAAQ,kBAAM,EAAKC,MAAMC,QAAQC,KAAK,cAEzC,CACGL,MAAM,kBACNC,KAAK,mBACLC,QAAQ,kBAAM,EAAKC,MAAMC,QAAQC,KAAK,aAG3C,OACE,yBAAKC,UAAU,OACb,kBAAC,UAAD,CAASC,MAAOR,IAChB,yBAAKS,GAAG,QACJ,8BACI,yBAAKF,UAAU,UAAUE,GAAG,WACvBC,KAAKN,MAAMO,iB,GA3BdC,aAoCHC,cAAWd,GCjCNe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCdAC,E,YAEF,WAAYf,GAAO,IAAD,8BACd,4CAAMA,KACDgB,MAAQ,CACTC,MAAO,GACPC,UAAU,GAJA,E,iFAQG,IAAD,OAEhBC,MAAM,+CACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACF,EAAKC,SAAS,CACVL,UAAU,EACVD,MAAOK,S,+BAKX,IAAD,EAGmBhB,KAAKU,MAAzBE,EAHC,EAGDA,SAAUD,EAHT,EAGSA,MAEhB,OAAKC,EAKG,yBAAKf,UAAU,OACf,wBAAIqB,MAAOC,GACNR,EAAMS,KAAI,SAAAC,GAAI,OACX,wBAAIC,IAAKD,EAAKtB,IAAd,SACUsB,EAAKE,KADf,cACgCF,EAAKG,QAAQC,WARlD,+C,GA5BIvB,aAiDbiB,EAAQ,CACVO,cAAe,QAGJjB,IChDAkB,EANF,kBACT,yBAAK9B,UAAU,SACX,kBAAC,EAAD,QCIO+B,EAPC,kBACZ,yBAAK/B,UAAU,SACX,qCACA,kFCIOgC,EAPD,kBACV,yBAAKhC,UAAU,SACX,uCACA,mECKRiC,IAASC,OAED,kBAAC,IAAD,KACI,kBAAC,EAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWP,IACjC,kBAAC,IAAD,CAAOM,KAAK,WAAWC,UAAWN,IAClC,kBAAC,IAAD,CAAOK,KAAK,SAASC,UAAWL,OAKhDM,SAASC,eAAe,SL6GtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,kB","file":"static/js/main.ded822e3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport 'primereact/resources/themes/nova-light/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\nimport './App.css';\n\nimport {Menubar} from 'primereact/menubar';\nimport {withRouter} from 'react-router-dom';\n\nclass App extends Component {\n\n  \n  render() {\n    const menuitems = [\n      {\n         label:'Conversor',\n         icon:'pi pi-fw pi-dollar',\n         command:() => this.props.history.push('/')\n      },\n      {\n         label:'Contato',\n         icon:'pi pi-fw pi-user',\n         command:() => this.props.history.push('/contato')\n      },\n      {\n         label:'Descrição',\n         icon:'pi pi-fw pi-file',\n         command:() => this.props.history.push('/descr')\n      }\n   ];\n    return (\n      <div className=\"App\">\n        <Menubar model={menuitems}/>      \n        <div id=\"main\">\n            <main>\n                <div className=\"content\" id=\"content\">\n                    {this.props.children}\n                </div>\n            </main>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\r\n\r\n\r\n\r\nclass Conv extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            items: [],\r\n            isLoaded: false,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        fetch('https://jsonplaceholder.typicode.com/users/')\r\n        .then(res => res.json())\r\n        .then(json => {\r\n            this.setState({\r\n                isLoaded: true,\r\n                items: json,\r\n            })\r\n        });\r\n    }\r\n\r\n  render() {\r\n\r\n\r\n    var { isLoaded, items } = this.state;\r\n\r\n    if (!isLoaded) {\r\n        return <div>Loading...</div>;\r\n    }\r\n    else {\r\n        return (\r\n            <div className=\"App\">              \r\n            <ul style={lista}>\r\n                {items.map(item => (\r\n                    <li key={item.id}>\r\n                       Nome: {item.name} | Cidade: {item.address.city}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n\r\n            </div>\r\n          );\r\n    }\r\n\r\n    \r\n  }\r\n}\r\n\r\nconst lista = {\r\n    listStyleType: \"none\",\r\n}\r\n\r\nexport default Conv; \r\n\r\n","import React from 'react';\r\nimport Conv from '../components/conv';\r\n\r\nconst Home = () => (\r\n    <div className=\"title\">\r\n        <Conv></Conv>\r\n    </div>\r\n);\r\n\r\nexport default Home;","import React from 'react';\r\n\r\nconst Contato = () => (\r\n    <div className=\"title\">\r\n        <h4>Sobre</h4>\r\n        <p>Aqui estão as informações a meu respeito</p>\r\n    </div>\r\n);\r\n\r\nexport default Contato;","import React from 'react';\r\n\r\nconst Descr = () => (\r\n    <div className=\"title\">\r\n        <h4>Contato</h4>\r\n        <p>Me contate pelos seguintes canais.</p>\r\n    </div>\r\n);\r\n\r\nexport default Descr;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Home from './pages/home';\nimport Contato from './pages/contato';\nimport Descr from './pages/descr';\n\nReactDOM.render(\n    (\n        <Router>\n            <App>\n                <Switch>\n                    <Route exact path=\"/\" component={Home}/>\n                    <Route path=\"/Contato\" component={Contato}/>\n                    <Route path=\"/Descr\" component={Descr}/>\n                </Switch>\n            </App>\n        </Router>\n    ),\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}